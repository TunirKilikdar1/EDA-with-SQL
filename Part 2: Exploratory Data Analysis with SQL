## Part 2: SQL Layoffs Data Analysis

## Overview

This repository contains a set of SQL queries designed to analyze a dataset of company layoffs stored in the table `layoffs_final`. The analysis covers a wide range of metrics including date range, aggregate layoffs, and rankings by various dimensions (company, industry, country, stage, etc.). The purpose of these queries is to gain insights into the layoffs dataâ€”identifying trends, evaluating the impact of complete shutdowns, and ranking entities based on layoff numbers.

> **Note:**  
> This project is solely focused on data analysis. It does not include any data cleaning or transformation queries. The analysis queries assume that the data in `layoffs_final` is already prepared for exploration.

## Table of Contents

1. [Basic Data Exploration](#basic-data-exploration)
2. [Analysis of 100% Layoffs (Complete Shutdowns)](#analysis-of-100-layoffs-complete-shutdowns)
3. [Aggregations by Different Dimensions](#aggregations-by-different-dimensions)
   - [By Company](#by-company)
   - [By Industry](#by-industry)
   - [By Country](#by-country)
   - [By Stage](#by-stage)
   - [By Date, Year, and Month](#by-date-year-and-month)
4. [Rolling Totals Analysis](#rolling-totals-analysis)
5. [Ranking Analyses](#ranking-analyses)
   - [Ranking Companies by Monthly Layoffs](#ranking-companies-by-monthly-layoffs)
   - [Ranking Companies by Yearly Layoffs](#ranking-companies-by-yearly-layoffs)
   - [Top-Ranked Companies by Year (Top 5 per Year)](#top-ranked-companies-by-year-top-5-per-year)
   - [Ranking Industries by Yearly Layoffs](#ranking-industries-by-yearly-layoffs)
   - [Ranking Countries by Yearly Layoffs](#ranking-countries-by-yearly-layoffs)
5. [Complete SQL Script](#complete-sql-script)
6. [How to Run This Project](#how-to-run-this-project)
7. [Future Enhancements](#future-enhancements)
8. [Conclusion](#conclusion)

---

## Basic Data Exploration

### Retrieve All Records and Analyze Date Range

The analysis begins by retrieving all records from `layoffs_final` and exploring the overall date range. This helps confirm that the dataset covers the period of interest (from 2020-01-04 to 2023-12-02).

```sql
-- Retrieve all records from the final layoffs table
SELECT *
FROM layoffs_final;

-- ***************************************************************
-- Analyze the date range of the dataset
-- (This analysis is done for dates between 2020-01-04 and 2023-12-02)
-- ***************************************************************

-- Find the minimum and maximum dates in the dataset
SELECT min(`date`), max(`date`)
FROM layoffs_final;
```

### Basic Aggregate Metrics

Next, the queries compute basic aggregate metrics such as the maximum and average values for `total_laid_off` and `percentage_laid_off`. These metrics provide an overview of the magnitude and distribution of layoffs.

```sql
-- ***************************************************************
-- Basic Aggregate Metrics for Total and Percentage Laid Off
-- ***************************************************************

-- Retrieve maximum and average values for total_laid_off and percentage_laid_off
SELECT max(total_laid_off), avg(total_laid_off), max(percentage_laid_off), avg(percentage_laid_off)
FROM layoffs_final;
```

---

## Analysis of 100% Layoffs (Complete Shutdowns)

The following queries focus on records where 100% of employees were laid off (i.e., `percentage_laid_off = 1`). This subset is crucial to identify complete shutdowns and analyze their impact.

```sql
-- ***************************************************************
-- Top Records Where 100% of Employees Were Laid Off
-- ***************************************************************

-- Retrieve the top 10 records where 100% of employees (percentage_laid_off = 1) were laid off,
-- ordering by the highest total_laid_off first
SELECT *
FROM layoffs_final
WHERE percentage_laid_off = 1
ORDER BY total_laid_off DESC
LIMIT 10;
```

Additionally, the queries calculate how many companies experienced complete shutdowns per month and year:

```sql
SELECT MONTH(`date`) AS month, YEAR(`date`) AS year, COUNT(company) as company_shutdown
FROM layoffs_final
WHERE percentage_laid_off = 1
GROUP BY month,year
ORDER BY company_shutdown DESC;
```

An expanded version with inline comments explains the approach:

```sql
-- Company Shutdowns by Month and Year
-- Calculate the number of companies that experienced a complete shutdown
SELECT MONTH(`date`) AS month, 
       YEAR(`date`) AS year, 
       COUNT(company) AS company_shutdown
FROM layoffs_final
WHERE percentage_laid_off = 1        -- Filter to include only records with 100% layoffs (i.e., complete shutdowns)
GROUP BY month, year                 -- Group results by month and year to get aggregate counts per period
ORDER BY company_shutdown DESC;      -- Order by the shutdown count in descending order
```

Further, the data is analyzed based on funds raised:

```sql
-- Retrieve records where 100% of employees were laid off, ordered by funds_raised_millions
SELECT *
FROM layoffs_final
WHERE percentage_laid_off = 1
ORDER BY funds_raised_millions DESC;

-- Retrieve top 10 companies (with location and country) where 100% of employees were laid off,
-- ordered by funds_raised_millions in descending order
SELECT company, location, country, funds_raised_millions
FROM layoffs_final
WHERE percentage_laid_off = 1
ORDER BY funds_raised_millions DESC
LIMIT 10;
```

---

## Aggregations by Different Dimensions

### By Company

These queries aggregate layoffs at the company level. They compute the total layoffs per company and compare each company's layoffs to the overall total.

```sql
-- ***************************************************************
-- Aggregations by Company
-- ***************************************************************

-- Sum the total layoffs per company, ordered by the highest sum first
SELECT company, sum(total_laid_off)
FROM layoffs_final
GROUP BY company
ORDER BY 2 DESC;

-- For each company, calculate:
-- - the total layoffs per company,
-- - the overall total layoffs (via a scalar subquery),
-- - and the percentage share of total layoffs.
SELECT company, sum(total_laid_off),
(
  SELECT sum(total_laid_off)
  FROM layoffs_final
) AS total_layoff,
(sum(total_laid_off) / (
  SELECT sum(total_laid_off)
  FROM layoffs_final
) * 100) AS perc_of_total_layoff
FROM layoffs_final
GROUP BY company
ORDER BY 2 DESC
LIMIT 10;

-- Retrieve the 5 companies with the smallest non-null sum of layoffs
SELECT company, sum(total_laid_off)
FROM layoffs_final
GROUP BY company
HAVING sum(total_laid_off) IS NOT NULL
ORDER BY 2
LIMIT 5;
```

### By Industry

Aggregation by industry helps reveal which industries are most affected by layoffs.

```sql
-- ***************************************************************
-- Aggregations by Industry
-- ***************************************************************

-- Sum the total layoffs per industry, ordered by the highest sum first
SELECT industry, sum(total_laid_off)
FROM layoffs_final
GROUP BY industry
ORDER BY 2 DESC;

-- For each industry, calculate:
-- - the total layoffs per industry,
-- - the overall total layoffs,
-- - and the percentage share of total layoffs.
SELECT industry, sum(total_laid_off),
(
  SELECT sum(total_laid_off)
  FROM layoffs_final
) AS total_layoff,
(sum(total_laid_off) / (
  SELECT sum(total_laid_off)
  FROM layoffs_final
) * 100) AS perc_of_total_layoff
FROM layoffs_final
GROUP BY industry
ORDER BY 2 DESC
LIMIT 5;

-- Sum total layoffs per non-null industry, ordered in ascending order (limit 5)
SELECT industry, sum(total_laid_off)
FROM layoffs_final
WHERE industry IS NOT NULL
GROUP BY industry
ORDER BY 2
LIMIT 5;
```

### By Country

These queries determine which countries have experienced the most layoffs.

```sql
-- ***************************************************************
-- Aggregations by Country
-- ***************************************************************

-- Sum the total layoffs per country, ordered by highest sum first
SELECT country, sum(total_laid_off)
FROM layoffs_final
GROUP BY country
ORDER BY 2 DESC;

-- For each country, calculate:
-- - the total layoffs per country,
-- - the overall total layoffs,
-- - and the percentage share of total layoffs.
SELECT country, sum(total_laid_off),
(
  SELECT sum(total_laid_off)
  FROM layoffs_final
) AS total_layoff,
(sum(total_laid_off) / (
  SELECT sum(total_laid_off)
  FROM layoffs_final
) * 100) AS perc_of_total_layoff
FROM layoffs_final
GROUP BY country
ORDER BY 2 DESC
LIMIT 5;

-- Sum total layoffs per country with non-null values, ordered in ascending order (limit 5)
SELECT country, sum(total_laid_off)
FROM layoffs_final
GROUP BY country
HAVING sum(total_laid_off) IS NOT NULL
ORDER BY 2
LIMIT 5;
```

### By Stage

Analyzing layoffs by company stage (e.g., Startup, Established) can help identify which stages are more vulnerable.

```sql
-- ***************************************************************
-- Aggregations by Stage
-- ***************************************************************

-- For each stage, calculate:
-- - the total layoffs,
-- - the overall total layoffs,
-- - and the percentage share of total layoffs.
SELECT stage, sum(total_laid_off),
(
  SELECT sum(total_laid_off)
  FROM layoffs_final
) AS total_layoff,
(sum(total_laid_off) / (
  SELECT sum(total_laid_off)
  FROM layoffs_final
) * 100) AS perc_of_total_layoff
FROM layoffs_final
GROUP BY stage
ORDER BY 2 DESC
LIMIT 5;

-- Sum total layoffs per stage, filtering out null stage values (limit 5)
SELECT stage, sum(total_laid_off)
FROM layoffs_final
GROUP BY stage
HAVING sum(total_laid_off) AND stage IS NOT NULL
ORDER BY 2
LIMIT 5;
```

### By Date, Year, and Month

Time-based aggregations are essential to understand trends over days, months, and years.

```sql
-- ***************************************************************
-- Aggregations by Date
-- ***************************************************************

-- Sum total layoffs for each date, filtering out null dates, ordered by highest sum first (limit 10)
SELECT `date`, sum(total_laid_off)
FROM layoffs_final
GROUP BY `date`
HAVING sum(total_laid_off) AND `date` IS NOT NULL
ORDER BY 2 DESC
LIMIT 10;

-- Sum total layoffs for each date, filtering out null dates, ordered by sum in ascending order (limit 5)
SELECT `date`, sum(total_laid_off)
FROM layoffs_final
GROUP BY `date`
HAVING sum(total_laid_off) AND `date` IS NOT NULL
ORDER BY 2
LIMIT 5;
```

Aggregations by year and month allow us to break down the data temporally:

```sql
-- ***************************************************************
-- Aggregations by Year and Month
-- ***************************************************************

-- Sum total layoffs per year, filtering out null years, ordered by highest sum first
SELECT YEAR(`date`) AS year, sum(total_laid_off)
FROM layoffs_final
GROUP BY year
HAVING year IS NOT NULL
ORDER BY 2 DESC;

-- For each month, calculate:
-- - the total layoffs,
-- - the overall total layoffs,
-- - and the percentage share of total layoffs.
SELECT MONTH(`date`) AS month, sum(total_laid_off),
(
  SELECT sum(total_laid_off)
  FROM layoffs_final
) AS total_layoff,
(sum(total_laid_off) / (
  SELECT sum(total_laid_off)
  FROM layoffs_final
) * 100) AS perc_of_total_layoff
FROM layoffs_final
GROUP BY month
HAVING month IS NOT NULL
ORDER BY 2 DESC;

-- For each year and month combination, calculate:
-- - the total layoffs,
-- - the overall total layoffs,
-- - and the percentage share of total layoffs.
SELECT MONTH(`date`) AS month, YEAR(`date`) AS year, sum(total_laid_off),
(
  SELECT SUM(total_laid_off)
  FROM layoffs_final
) AS total_layoff,
(SUM(total_laid_off) / (
  SELECT SUM(total_laid_off)
  FROM layoffs_final
) * 100) AS perc_of_total_layoff
FROM layoffs_final
GROUP BY year, month
HAVING month IS NOT NULL AND year IS NOT NULL
ORDER BY 3 DESC;
```

---

## Rolling Totals Analysis

A rolling total (cumulative sum) provides insight into the progression of layoffs over time. This query calculates monthly totals and then computes a rolling total ordered by year and month.

```sql
-- ***************************************************************
-- Rolling Total Calculation by Month and Year
-- ***************************************************************

-- Calculate monthly totals and a rolling (cumulative) total ordered by year and month
SELECT 
    month, 
    year, 
    monthly_total,
    SUM(monthly_total) OVER (ORDER BY year, month) AS rolling_total,
    total_layoff
FROM (
    SELECT 
        MONTH(`date`) AS month, 
        YEAR(`date`) AS year,
        SUM(total_laid_off) AS monthly_total,
        (SELECT SUM(total_laid_off) FROM layoffs_final) AS total_layoff
    FROM layoffs_final
    WHERE `date` IS NOT NULL
    GROUP BY YEAR(`date`), MONTH(`date`)
) AS sub
ORDER BY year, month;
```

---

## Ranking Analyses

Ranking queries help identify top-performing entities based on layoff figures.

### Ranking Companies by Monthly Layoffs

This query ranks companies according to their monthly layoffs (overall ranking):

```sql
-- ***************************************************************
-- Ranking Companies by Monthly Layoffs (Overall)
-- ***************************************************************

-- Rank companies based on their monthly layoffs (not partitioned by month)
WITH SUB AS (
    SELECT company, MONTH(`date`) AS month, YEAR(`date`) AS year,
           SUM(total_laid_off) AS monthly_layoff,
           (SELECT SUM(total_laid_off) FROM layoffs_final) AS total_layoff
    FROM layoffs_final
    GROUP BY company, year, month
    HAVING SUM(total_laid_off) IS NOT NULL
    ORDER BY 4 DESC
)
SELECT
    DENSE_RANK() OVER(ORDER BY monthly_layoff DESC) AS rankings, 
    company, month, year, monthly_layoff
FROM SUB;
```

### Ranking Companies by Yearly Layoffs

This query ranks companies based on total yearly layoffs:

```sql
-- ***************************************************************
-- Ranking Companies by Yearly Layoffs
-- ***************************************************************

-- Rank companies based on yearly layoffs overall
WITH SUB AS (
    SELECT company, YEAR(`date`) AS year,
           SUM(total_laid_off) AS yearly_layoff,
           (SELECT SUM(total_laid_off) FROM layoffs_final) AS total_layoff
    FROM layoffs_final
    GROUP BY company, year
    HAVING SUM(total_laid_off) IS NOT NULL
    ORDER BY 3 DESC
)
SELECT
    DENSE_RANK() OVER(ORDER BY yearly_layoff DESC) AS rankings, 
    company, year, yearly_layoff
FROM SUB;
```

### Top-Ranked Companies by Year (Top 5 per Year)

For a more granular view, this query ranks companies per year and selects the top 5 companies for each year:

```sql
-- ***************************************************************
-- Ranking Companies by Yearly Layoffs Per Year (Top 5 per Year)
-- ***************************************************************

-- Rank companies by yearly layoffs for each year, and select the top 5 companies per year
WITH SUB AS (
    SELECT company, YEAR(`date`) AS year,
           SUM(total_laid_off) AS yearly_layoff,
           (SELECT SUM(total_laid_off) FROM layoffs_final) AS total_layoff
    FROM layoffs_final
    GROUP BY company, year
    HAVING SUM(total_laid_off) IS NOT NULL
    ORDER BY 3 DESC
), company_rank AS (
    SELECT
        DENSE_RANK() OVER(PARTITION BY year ORDER BY yearly_layoff DESC) AS rankings, 
        company, year, yearly_layoff
    FROM SUB
    WHERE year IS NOT NULL
)
SELECT *
FROM company_rank
WHERE rankings <= 5;

-- Top-Ranked Companies (Assuming 'company_rank' CTE is Defined)
-- Retrieve all columns from the pre-defined ranking result (company_rank)
-- and return only the companies that are ranked in the top 5.
SELECT *
FROM company_rank
WHERE rankings <= 5;
```

### Ranking Industries by Yearly Layoffs (Top 5 per Year)

This query ranks industries per year based on total layoffs:

```sql
-- ***************************************************************
-- Top 5 Industries by Yearly Layoffs
-- ***************************************************************

-- Rank industries based on their total layoffs each year and select the top 5 industries per year.
WITH SUB AS (
    SELECT industry, 
           YEAR(`date`) AS year,
           SUM(total_laid_off) AS yearly_layoff,
           (SELECT SUM(total_laid_off) FROM layoffs_final) AS total_layoff 
    FROM layoffs_final
    GROUP BY industry, year             
    HAVING SUM(total_laid_off) IS NOT NULL  
), 
ind_rank AS (
    -- Next, rank the industries within each year using DENSE_RANK.
    SELECT DENSE_RANK() OVER (PARTITION BY year ORDER BY yearly_layoff DESC) AS rankings, 
           industry, 
           year, 
           yearly_layoff
    FROM SUB
    WHERE year IS NOT NULL             
)
SELECT *
FROM ind_rank
WHERE rankings <= 5;
```

### Ranking Countries by Yearly Layoffs (Top 5 per Year)

Finally, this query ranks countries per year by total layoffs:

```sql
-- ***************************************************************
-- Top 5 Countries by Yearly Layoffs
-- ***************************************************************

-- Rank countries based on their total layoffs each year and select the top 5 countries per year.
WITH SUB AS (
    SELECT country, 
           YEAR(`date`) AS year,
           SUM(total_laid_off) AS yearly_layoff,
           (SELECT SUM(total_laid_off) FROM layoffs_final) AS total_layoff  
    FROM layoffs_final
    GROUP BY country, year             
    HAVING SUM(total_laid_off) IS NOT NULL  
    ORDER BY yearly_layoff DESC        
), 
coun_rank AS (
    SELECT DENSE_RANK() OVER (PARTITION BY year ORDER BY yearly_layoff DESC) AS rankings, 
           country, 
           year, 
           yearly_layoff
    FROM SUB
    WHERE year IS NOT NULL             
)
SELECT *
FROM coun_rank
WHERE rankings <= 5;
```

---

## 5. Complete SQL Script

The complete SQL scriptâ€”including all the analysis queries aboveâ€”is included in this repository (e.g., in a file named `layoffs_analysis.sql`). It covers data exploration, various aggregations, rolling totals, and ranking analyses.

---

## 6. How to Run This Project

1. **Clone the Repository:**  
   Clone or download the repository to your local machine.

2. **Set Up Your SQL Environment:**  
   Ensure you are using MySQL 8.0 or later (for CTE and window function support). Create the appropriate database and ensure the `layoffs_final` table is populated with the data.

3. **Execute the SQL Script:**  
   Run the provided SQL script (either via your SQL client or command line). The queries will produce a series of result sets that you can review for insights into layoffs data across various dimensions.

---

## 7. Future Enhancements

- **Advanced Visualizations:**  
  Integrate the output with visualization tools (like Tableau or Power BI) for dynamic dashboards.

- **Enhanced Temporal Analysis:**  
  Further break down data by quarters or specific events to understand trends more deeply.

- **Additional Metrics:**  
  Incorporate more sophisticated statistical metrics or predictive models to forecast future trends.

---

## 8. Conclusion

This project demonstrates a comprehensive approach to analyzing company layoffs data using SQL. By aggregating, calculating rolling totals, and ranking by various dimensions (company, industry, country, stage, etc.), the analysis provides actionable insights that can inform business decisions and further investigations.

---

Feel free to update or expand this README as the project evolves.
